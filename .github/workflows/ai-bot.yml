# =================================================================
# FILE 1: .github/workflows/ai-bot.yml
# Complete GitHub Actions Workflow for PMERIT AI Bot
# =================================================================

name: PMERIT AI Development Bot
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  issues:
    types: [opened, edited]
  release:
    types: [published, created]
  schedule:
    - cron: '0 6 * * *'  # Daily scan at 6 AM UTC
  workflow_dispatch:  # Manual trigger

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  ai-diagnostic:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
      - name: üîç Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: üì¶ Install Dependencies
        run: |
          npm init -y 2>/dev/null || true
          npm install openai@^4.0.0 --save
          
      - name: ü§ñ Run PMERIT AI Diagnostic Bot
        id: ai-scan
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "üéì Starting PMERIT Educational Platform AI Analysis..."
          node scripts/ai-diagnostic-bot.js
          echo "scan-completed=true" >> $GITHUB_OUTPUT
          
      - name: üìä Create Diagnostic Summary
        if: steps.ai-scan.outputs.scan-completed == 'true'
        run: |
          echo "## ü§ñ PMERIT AI Bot Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Mission:** Breaking poverty cycles through accessible education" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Platform Status:** Educational Platform Optimized ‚úÖ" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "diagnostic-reports/latest-summary.md" ]; then
            cat diagnostic-reports/latest-summary.md >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: üìù Commit AI Reports
        if: steps.ai-scan.outputs.scan-completed == 'true'
        run: |
          git config --local user.email "ai-bot@pmerit.com"
          git config --local user.name "PMERIT AI Bot ü§ñ"
          git add diagnostic-reports/ security-reports/ mobile-reports/ educational-reports/ action-plans/ || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ü§ñ AI Diagnostic Report - $(date '+%Y-%m-%d %H:%M UTC')
            
            üéì Educational Platform Analysis Complete
            üìä Reports: Security, Mobile, Educational Impact
            üöÄ Mission: Accessible education for underserved communities"
            git push
          fi
          
      - name: üêô Create GitHub Issues for Critical Findings
        if: steps.ai-scan.outputs.scan-completed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Check for critical findings file
            if (fs.existsSync('diagnostic-reports/critical-findings.json')) {
              const findings = JSON.parse(fs.readFileSync('diagnostic-reports/critical-findings.json', 'utf8'));
              
              for (const finding of findings) {
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `üö® Critical: ${finding.issue}`,
                  body: `## üéì PMERIT Educational Platform - Critical Finding
            
            **Category:** ${finding.category}
            **File:** \`${finding.file}\`
            **Impact:** ${finding.impact}
            
            ### üìã Recommendation
            ${finding.recommendation}
            
            ### üéØ Educational Mission Priority
            This issue affects our mission of providing accessible education to underserved communities.
            
            **Auto-generated by PMERIT AI Bot ü§ñ**`,
                  labels: ['critical', 'ai-bot', 'educational-platform']
                });
                
                console.log(`Created issue #${issue.data.number}: ${finding.issue}`);
              }
            }

# =================================================================
# FILE 2: scripts/ai-diagnostic-bot.js  
# Enhanced AI Diagnostic Engine for Educational Platform
# =================================================================

const fs = require('fs');
const path = require('path');

// Initialize OpenAI only if API key is available
let openai = null;
try {
  if (process.env.OPENAI_API_KEY) {
    const { OpenAI } = require('openai');
    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
  }
} catch (error) {
  console.log("OpenAI not available, running basic diagnostic mode");
}

class PMERITAIDiagnosticBot {
    constructor() {
        this.findings = [];
        this.projectContext = "Gabriel AI Educational Platform - Breaking poverty cycles through accessible education in Nigeria/Africa";
        this.criticalFiles = [
            'js/auth.js', 'js/components.js', 'js/dashboard.js', 'js/course-hub.js',
            'css/responsive.css', 'css/main.css', 'css/course-hub.css',
            'index.html', 'dashboard.html', 'courses.html'
        ];
        this.aiAnalysis = null;
    }

    async runComprehensiveScan() {
        console.log("ü§ñ PMERIT AI Bot: Starting educational platform analysis...");
        console.log(`üìÖ Scan initiated: ${new Date().toISOString()}`);
        
        try {
            // Phase 1: Code Analysis
            await this.scanEducationalPlatform();
            
            // Phase 2: AI-Powered Analysis (if available)
            if (openai) {
                await this.getAIRecommendations();
            } else {
                console.log("‚ÑπÔ∏è Running in basic mode without AI analysis");
            }
            
            // Phase 3: Generate Reports
            await this.generateEducationalReports();
            
            // Phase 4: Create Action Items
            await this.createActionPlan();
            
            console.log("‚úÖ Educational platform analysis complete!");
            console.log(`üìä Total findings: ${this.findings.length}`);
            
        } catch (error) {
            console.error("‚ùå Analysis failed:", error.message);
            await this.generateErrorReport(error);
        }
    }

    async scanEducationalPlatform() {
        console.log("üîç Scanning PMERIT educational platform files...");
        
        // Scan critical platform files
        for (const file of this.criticalFiles) {
            if (fs.existsSync(file)) {
                await this.analyzeEducationalFile(file);
            }
        }

        // Educational platform specific checks
        this.checkStudentDataSecurity();
        this.checkMobileAccessibility();
        this.checkEducationalFeatures();
        this.checkProductionReadiness();
    }

    async analyzeEducationalFile(filePath) {
        try {
            const content = fs.readFileSync(filePath, 'utf8');
            console.log(`  üìÑ Analyzing ${filePath} for educational platform compliance...`);

            // Security checks for student data
            this.scanStudentDataSecurity(filePath, content);
            
            // Mobile accessibility for underserved communities
            this.scanMobileAccessibility(filePath, content);
            
            // Authentication flow for educational users
            this.scanEducationalAuthentication(filePath, content);
            
            // Course enrollment integrity
            this.scanCourseEnrollment(filePath, content);
            
        } catch (error) {
            this.addFinding({
                file: filePath,
                severity: "MEDIUM",
                category: "System",
                issue: `File analysis error: ${error.message}`,
                impact: "Cannot analyze critical educational platform file",
                recommendation: "Check file permissions and encoding"
            });
        }
    }

    scanStudentDataSecurity(filePath, content) {
        const securityPatterns = [
            {
                pattern: /localStorage\.setItem.*session|localStorage\.setItem.*user/gi,
                severity: "CRITICAL",
                issue: "Student session data stored unencrypted",
                impact: "Student privacy at risk - sessions vulnerable to XSS attacks",
                recommendation: "Implement secure, encrypted session storage for student data protection"
            },
            {
                pattern: /password.*=.*value|password.*alert|password.*console/gi,
                severity: "CRITICAL", 
                issue: "Student password exposure risk",
                impact: "Student credentials may be exposed or logged",
                recommendation: "Remove password content from logs and implement secure password handling"
            },
            {
                pattern: /innerHTML.*\+.*input|innerHTML.*=.*[^"']\w+/gi,
                severity: "HIGH",
                issue: "DOM injection vulnerability affecting students",
                impact: "Students could be exposed to malicious content or XSS attacks",
                recommendation: "Use textContent or sanitize all user input before DOM insertion"
            }
        ];

        this.applyPatterns(filePath, content, securityPatterns, "Security");
    }

    scanMobileAccessibility(filePath, content) {
        const mobilePatterns = [
            {
                pattern: /min-height:\s*(?:[1-3]\d|[1-9])px/gi,
                severity: "HIGH",
                issue: "Touch targets too small for mobile students",
                impact: "Poor accessibility for students using low-cost Android devices",
                recommendation: "Ensure all buttons and links are at least 44px for mobile accessibility"
            },
            {
                pattern: /font-size:\s*([1-9]|1[01])px/gi,
                severity: "MEDIUM",
                issue: "Text too small for mobile learning",
                impact: "Difficult reading experience for students on mobile devices",
                recommendation: "Use minimum 12px font sizes, prefer rem units for better scalability"
            },
            {
                pattern: /@media.*max-width.*768px.*{[^}]*display:\s*none/gi,
                severity: "MEDIUM",
                issue: "Educational content hidden on mobile",
                impact: "Students may miss critical learning features on mobile devices",
                recommendation: "Provide mobile-friendly alternatives instead of hiding content"
            }
        ];

        this.applyPatterns(filePath, content, mobilePatterns, "Mobile");
    }

    scanEducationalAuthentication(filePath, content) {
        const authPatterns = [
            {
                pattern: /addSubjectToCart.*{[^}]*(?!try|catch)/gi,
                severity: "MEDIUM",
                issue: "Course enrollment lacks error handling",
                impact: "Students may experience failed enrollments without clear feedback",
                recommendation: "Add comprehensive error handling with student-friendly messages"
            },
            {
                pattern: /window\.location\.href.*=.*signin/gi,
                severity: "LOW",
                issue: "Hard-coded authentication redirects",
                impact: "Reduces flexibility for educational platform deployment",
                recommendation: "Use configurable redirect URLs for authentication flow"
            }
        ];

        this.applyPatterns(filePath, content, authPatterns, "Authentication");
    }

    scanCourseEnrollment(filePath, content) {
        if (filePath.includes('course-hub') || filePath.includes('dashboard')) {
            this.addFinding({
                file: filePath,
                severity: "MEDIUM",
                category: "Educational",
                issue: "Course enrollment flow needs validation",
                impact: "Students may encounter issues during course enrollment process",
                recommendation: "Implement comprehensive course enrollment testing and user feedback"
            });
        }
    }

    checkStudentDataSecurity() {
        this.addFinding({
            file: "Student Data Protection",
            severity: "HIGH",
            category: "Security",
            issue: "Student data protection compliance needs verification",
            impact: "Platform may not meet privacy standards for educational data",
            recommendation: "Implement GDPR/FERPA compliance measures for student privacy protection"
        });
    }

    checkMobileAccessibility() {
        this.addFinding({
            file: "Mobile Accessibility",
            severity: "HIGH", 
            category: "Mobile",
            issue: "Limited offline capability for low-bandwidth areas",
            impact: "Students in areas with poor connectivity cannot access educational content",
            recommendation: "Implement Progressive Web App features with offline learning capabilities"
        });
    }

    checkEducationalFeatures() {
        this.addFinding({
            file: "Educational Features",
            severity: "MEDIUM",
            category: "Educational",
            issue: "Student progress tracking needs enhancement",
            impact: "Students may lose track of their learning progress across sessions",
            recommendation: "Implement robust progress persistence and recovery mechanisms"
        });
    }

    checkProductionReadiness() {
        this.addFinding({
            file: "Production Deployment",
            severity: "MEDIUM",
            category: "Production",
            issue: "Educational platform production readiness assessment needed",
            impact: "Platform may face issues when deployed for student use at scale",
            recommendation: "Conduct thorough production readiness review for educational workloads"
        });
    }

    async getAIRecommendations() {
        if (!openai || this.findings.length === 0) return;

        console.log("üß† Getting AI-powered educational platform recommendations...");
        
        try {
            const prompt = `As an expert AI consultant for PMERIT Educational Platform, analyze these findings:

**Mission:** ${this.projectContext}
**Target Users:** Students in underserved communities (Nigeria/Africa)
**Platform Type:** Accessible education through AI-powered learning

**Findings to Analyze:**
${JSON.stringify(this.findings.slice(0, 10), null, 2)}

**Required Analysis:**
1. **Educational Impact Priority:** Rank by impact on student learning outcomes
2. **Accessibility for Underserved Communities:** Mobile, bandwidth, device constraints  
3. **Student Data Protection:** Privacy and security for educational data
4. **Learning Experience Quality:** How issues affect educational engagement
5. **Implementation Roadmap:** Prioritized fixes with realistic timelines

Provide clear, actionable recommendations focused on educational mission success.`;

            const response = await openai.chat.completions.create({
                model: "gpt-4-1106-preview",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 2000,
                temperature: 0.7
            });

            this.aiAnalysis = response.choices[0].message.content;
            console.log("‚úÖ AI educational analysis complete");

        } catch (error) {
            console.error("‚ùå AI analysis failed:", error.message);
            this.aiAnalysis = "AI analysis unavailable - proceeding with standard educational assessment";
        }
    }

    async generateEducationalReports() {
        console.log("üìã Generating educational platform reports...");
        
        // Ensure directories exist
        this.ensureDirectoryExists('diagnostic-reports');
        this.ensureDirectoryExists('security-reports');
        this.ensureDirectoryExists('mobile-reports');
        this.ensureDirectoryExists('educational-reports');
        this.ensureDirectoryExists('action-plans');

        await this.generateMainEducationalReport();
        await this.generateSecurityReport();
        await this.generateMobileAccessibilityReport();
        await this.generateEducationalImpactReport();
        await this.generateSummaryForGitHub();
    }

    async generateMainEducationalReport() {
        const timestamp = new Date().toISOString().split('T')[0];
        const critical = this.findings.filter(f => f.severity === 'CRITICAL').length;
        const high = this.findings.filter(f => f.severity === 'HIGH').length;
        
        const report = `# üéì PMERIT Educational Platform - AI Diagnostic Report

**Generated:** ${new Date().toISOString()}  
**Platform:** Gabriel AI Educational Platform  
**Mission:** Breaking poverty cycles through accessible education  
**Target Communities:** Nigeria/Africa underserved populations  

## üéØ Executive Summary

${this.generateEducationalExecutiveSummary()}

## üß† AI-Powered Educational Analysis

${this.aiAnalysis || 'Educational platform analysis based on best practices for underserved communities.'}

## üìä Educational Platform Health Overview

- **Total Issues:** ${this.findings.length}
- **Critical Security Issues:** ${critical} (Student data protection)
- **High Priority Accessibility:** ${high} (Mobile learning access)
- **Student Impact Assessment:** ${this.findings.filter(f => f.category === 'Educational').length} items reviewed

## üîç Findings by Educational Priority

${this.generateEducationalPriorityFindings()}

## üöÄ Action Plan for Educational Excellence

${this.generateEducationalActionPlan()}

## üí¨ Interactive AI Assistant

Get personalized help with educational platform development:

\`\`\`bash
# Student experience questions
./scripts/ask-ai-bot.sh "How to improve student registration flow?"
./scripts/ask-ai-bot.sh "Optimize platform for low-bandwidth areas"

# Security and privacy questions
./scripts/ask-ai-bot.sh "Protect student data according to GDPR"
./scripts/ask-ai-bot.sh "Secure authentication for shared devices"

# Mobile accessibility questions
./scripts/ask-ai-bot.sh "Mobile optimization for Nigerian students"
./scripts/ask-ai-bot.sh "Offline learning capabilities implementation"
\`\`\`

---
*Generated by PMERIT AI Bot ü§ñ - Empowering education through intelligent development*
`;

        this.writeReport(`diagnostic-reports/${timestamp}-educational-platform-analysis.md`, report);
    }

    async generateSummaryForGitHub() {
        const critical = this.findings.filter(f => f.severity === 'CRITICAL').length;
        const high = this.findings.filter(f => f.severity === 'HIGH').length;
        
        const summary = `
## üìä Educational Platform Status

- **Mission Focus:** ‚úÖ Accessible education for underserved communities
- **Critical Issues:** ${critical} (requires immediate attention)
- **High Priority:** ${high} (affects student experience)
- **AI Analysis:** ${this.aiAnalysis ? '‚úÖ Complete' : '‚ö†Ô∏è Basic mode'}

## üéì Key Educational Priorities

1. **Student Data Protection** - ${this.findings.filter(f => f.category === 'Security').length} security items
2. **Mobile Accessibility** - ${this.findings.filter(f => f.category === 'Mobile').length} mobile optimization items  
3. **Learning Experience** - ${this.findings.filter(f => f.category === 'Educational').length} educational feature items

## üöÄ Next Steps

${critical > 0 ? '- üö® Address critical security vulnerabilities immediately' : ''}
${high > 0 ? '- üì± Optimize mobile accessibility for target communities' : ''}
- üéØ Enhance student enrollment and progress tracking
`;

        this.writeReport('diagnostic-reports/latest-summary.md', summary);
        
        // Generate critical findings for GitHub issues
        const criticalFindings = this.findings.filter(f => f.severity === 'CRITICAL');
        if (criticalFindings.length > 0) {
            this.writeReport('diagnostic-reports/critical-findings.json', JSON.stringify(criticalFindings, null, 2));
        }
    }

    generateEducationalExecutiveSummary() {
        const critical = this.findings.filter(f => f.severity === 'CRITICAL').length;
        const high = this.findings.filter(f => f.severity === 'HIGH').length;
        
        let summary = "The PMERIT educational platform demonstrates strong alignment with its mission of breaking poverty cycles through accessible education. ";
        
        if (critical > 0) {
            summary += `**${critical} critical security issues** require immediate attention to protect student data and privacy. `;
        }
        
        if (high > 0) {
            summary += `**${high} high-priority accessibility improvements** are needed to optimize the platform for students using mobile devices in underserved communities. `;
        }
        
        summary += "The platform shows excellent potential for serving its target communities with proper security and accessibility enhancements.";
        
        return summary;
    }

    generateEducationalPriorityFindings() {
        const categories = ['Security', 'Mobile', 'Educational', 'Authentication'];
        let output = '';
        
        categories.forEach(category => {
            const findings = this.findings.filter(f => f.category === category);
            if (findings.length > 0) {
                output += `\n### ${category} - Educational Platform Priority (${findings.length} items)\n\n`;
                findings.slice(0, 3).forEach(finding => {
                    output += `**${finding.severity}:** ${finding.issue}  \n`;
                    output += `üìÅ **File:** \`${finding.file}\`  \n`;
                    output += `üéØ **Student Impact:** ${finding.impact}  \n`;
                    output += `üí° **Recommendation:** ${finding.recommendation}  \n\n`;
                });
            }
        });
        
        return output;
    }

    generateEducationalActionPlan() {
        const immediate = this.findings.filter(f => f.severity === 'CRITICAL');
        const shortTerm = this.findings.filter(f => f.severity === 'HIGH');
        
        let plan = "### üö® Immediate Actions (This Week)\n\n";
        immediate.slice(0, 3).forEach(finding => {
            plan += `- **${finding.issue}** - ${finding.recommendation}\n`;
        });
        
        plan += "\n### üìÖ Short-term Goals (Next 2 Weeks)\n\n";
        shortTerm.slice(0, 3).forEach(finding => {
            plan += `- **${finding.issue}** - Focus on student experience improvement\n`;
        });
        
        plan += "\n### üéì Educational Excellence Goals (Next Month)\n\n";
        plan += "- Implement offline learning capabilities for low-bandwidth areas\n";
        plan += "- Enhance student progress tracking and data persistence\n";
        plan += "- Optimize platform performance for low-cost mobile devices\n";
        
        return plan;
    }

    // Utility methods
    applyPatterns(filePath, content, patterns, category) {
        patterns.forEach(pattern => {
            const matches = content.match(pattern.pattern);
            if (matches) {
                this.addFinding({
                    file: filePath,
                    line: this.getLineNumber(content, matches[0]),
                    severity: pattern.severity,
                    category: category,
                    issue: pattern.issue,
                    impact: pattern.impact,
                    recommendation: pattern.recommendation,
                    codeSnippet: matches[0].substring(0, 100)
                });
            }
        });
    }

    addFinding(finding) {
        this.findings.push({
            ...finding,
            timestamp: new Date().toISOString(),
            id: this.generateFindingId()
        });
    }

    generateFindingId() {
        return 'PMERIT-' + Date.now().toString(36) + '-' + Math.random().toString(36).substr(2, 5);
    }

    getLineNumber(content, match) {
        const index = content.indexOf(match);
        return index === -1 ? 1 : content.substring(0, index).split('\n').length;
    }

    ensureDirectoryExists(dir) {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
    }

    writeReport(filePath, content) {
        try {
            fs.writeFileSync(filePath, content);
            console.log(`üìã Educational report generated: ${filePath}`);
        } catch (error) {
            console.error(`‚ùå Failed to write report ${filePath}:`, error.message);
        }
    }

    async generateErrorReport(error) {
        const errorReport = `# ‚ùå PMERIT AI Bot Error Report

**Timestamp:** ${new Date().toISOString()}  
**Educational Platform:** Gabriel AI - PMERIT  
**Error:** ${error.message}  

## üîß Recovery Actions for Educational Platform

1. **Verify OpenAI API Configuration**
   - Check if OPENAI_API_KEY is properly set in GitHub Secrets
   - Ensure API key has sufficient credits and permissions

2. **Check Educational Platform Files**
   - Verify all critical educational platform files are accessible
   - Ensure proper file permissions for analysis

3. **GitHub Actions Environment**
   - Confirm Node.js and npm are properly installed
   - Check if required dependencies are available

4. **Contact Educational Platform Support**
   - Email: support@pmerit.com
   - Include this error report for faster resolution

## üéì Educational Mission Continuity

The educational platform continues to serve students while diagnostic improvements are implemented.
`;
        
        this.ensureDirectoryExists('error-reports');
        this.writeReport('error-reports/ai-bot-error.md', errorReport);
    }

    async createActionPlan() {
        console.log("üéØ Creating educational platform action plan...");
        // Action plan implementation can be added here
    }
}

// Execute the PMERIT Educational Platform AI Bot
(async () => {
    console.log("üéì Initializing PMERIT Educational Platform AI Analysis...");
    const bot = new PMERITAIDiagnosticBot();
    await bot.runComprehensiveScan();
    console.log("üéì Educational platform analysis complete - Ready to serve students!");
})().catch(error => {
    console.error('‚ùå PMERIT AI Educational Bot failed:', error);
    process.exit(1);
});

# =================================================================
# FILE 3: scripts/ask-ai-bot.sh
# Interactive AI Assistant for Educational Platform Development  
# =================================================================

#!/bin/bash

# PMERIT Educational Platform AI Assistant
# Interactive helper for educational platform development questions

QUESTION="$1"

if [ -z "$QUESTION" ]; then
    echo "üéì PMERIT Educational Platform AI Assistant"
    echo ""
    echo "Usage: ./ask-ai-bot.sh 'Your question about the educational platform'"
    echo ""
    echo "Example questions:"
    echo "  ‚Ä¢ 'How to improve student registration flow?'"
    echo "  ‚Ä¢ 'Optimize platform for Nigerian mobile users'"
    echo "  ‚Ä¢ 'Implement offline learning capabilities'"
    echo "  ‚Ä¢ 'Secure student data according to GDPR'"
    echo "  ‚Ä¢ 'Best practices for educational accessibility'"
    exit 1
fi

echo "ü§ñ PMERIT AI Assistant: Analyzing your educational platform question..."
echo "üéì Focus: Accessible education for underserved communities"
echo ""

# Check if OpenAI API key is available
if [ -z "$OPENAI_API_KEY" ]; then
    echo "‚ö†Ô∏è  OpenAI API key not found. Please set OPENAI_API_KEY environment variable."
    echo "   You can get an API key from: https://platform.openai.com/api-keys"
    echo ""
    echo "üéì Educational Platform Context for your question:"
    echo "   Mission: Breaking poverty cycles through accessible education"
    echo "   Target: Underserved communities in Nigeria/Africa"
    echo "   Focus: Mobile-first, low-bandwidth, student data protection"
    exit 1
fi

# Check if Node.js is available
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js not found. Please install Node.js to use the AI assistant."
    exit 1
fi

# Create temporary Node.js script for AI interaction
cat << 'EOF' > /tmp/pmerit-ai-assistant.js
const { OpenAI } = require('openai');

const openai = new OpenAI({ 
    apiKey: process.env.OPENAI_API_KEY 
});

const question = process.argv[2];

(async () => {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4-1106-preview',
            messages: [{
                role: 'system',
                content: `You are an expert AI consultant for the PMERIT Educational Platform, focused on breaking poverty cycles through accessible education in Nigeria/Africa. 

Key Context:
- Mission: Accessible, high-quality education for underserved communities
- Target Users: Students in Nigeria/Africa with limited resources
- Platform: AI-powered educational platform (Gabriel AI)
- Priorities: Mobile accessibility, low-bandwidth optimization, student data protection
- Technology: Modern web platform with responsive design

Provide specific, actionable technical advice that considers:
1. Mobile-first design for low-cost Android devices
2. Low-bandwidth optimization for areas with poor connectivity  
3. Student privacy and data protection (GDPR/FERPA compliance)
4. Educational best practices for underserved communities
5. Practical implementation steps with realistic timelines

Be concise but comprehensive. Focus on solutions that directly impact educational outcomes.`
            }, {
                role: 'user',
                content: question
            }],
            max_tokens: 1500,
            temperature: 0.7
        });
        
        console.log('üí° PMERIT AI Educational Recommendation:\n');
        console.log(response.choices[0].message.content);
        console.log('\nüéì Educational Impact: This guidance supports our mission of accessible education for all.');
        
    } catch (error) {
        console.error('‚ùå AI Assistant Error:', error.message);
        console.log('\nüéì Educational Platform Support:');
        console.log('   ‚Ä¢ Check API key configuration');
        console.log('   ‚Ä¢ Verify internet connectivity');  
        console.log('   ‚Ä¢ Contact: support@pmerit.com');
    }
})();
EOF

# Run the AI assistant
node /tmp/pmerit-ai-assistant.js "$QUESTION"

# Clean up
rm -f /tmp/pmerit-ai-assistant.js

echo ""
echo "üéì PMERIT Educational Platform AI Assistant"
echo "   Empowering education through intelligent development"
