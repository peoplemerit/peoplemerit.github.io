# .github/workflows/ai-edit.yml - ULTRA SAFE VERSION FOR MAIN BRANCH
name: 🛡️ PMERIT Safe AI Bot - Main Branch Only
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      improvement_type:
        description: 'Type of improvement (SAFE ONLY)'
        required: true
        default: 'comments-only'
        type: choice
        options:
        - comments-only
        - minor-css-formatting
        - minor-js-formatting
        - documentation
      confirm_backup:
        description: 'I confirm backup exists and approve changes'
        required: true
        type: boolean

jobs:
  ultra-safe-ai-improve:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_backup == true
    
    steps:
      - name: 🔒 Checkout with Backup Protection
        uses: actions/checkout@v4
        
      - name: 🚨 MANDATORY Pre-Operation Backup
        run: |
          echo "🔒 CREATING MANDATORY BACKUP BEFORE ANY CHANGES"
          
          # Create backup directory
          mkdir -p .emergency_backups
          
          # Create timestamped backup
          BACKUP_NAME="pre_ai_backup_$(date +%Y%m%d_%H%M%S)"
          
          # Backup ALL files
          tar -czf ".emergency_backups/${BACKUP_NAME}.tar.gz" \
            --exclude=.emergency_backups \
            --exclude=.git \
            --exclude=node_modules \
            .
          
          # Verify backup integrity
          if tar -tzf ".emergency_backups/${BACKUP_NAME}.tar.gz" >/dev/null 2>&1; then
            echo "✅ BACKUP VERIFIED: ${BACKUP_NAME}.tar.gz"
            echo "BACKUP_FILE=${BACKUP_NAME}.tar.gz" >> $GITHUB_ENV
          else
            echo "❌ BACKUP FAILED - ABORTING ALL OPERATIONS"
            exit 1
          fi
          
          # Log backup creation
          echo "$(date): Backup created ${BACKUP_NAME}.tar.gz" >> .emergency_backups/backup.log
          
      - name: 🛡️ Safety Check - Verify Critical Files
        run: |
          echo "🔍 Verifying critical files exist..."
          
          CRITICAL_FILES=("index.html" "css/main.css" "js/main.js" "CNAME" "README.md")
          MISSING_FILES=()
          
          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done
          
          if [ ${#MISSING_FILES[@]} -gt 0 ]; then
            echo "❌ CRITICAL FILES MISSING - CANNOT PROCEED:"
            for file in "${MISSING_FILES[@]}"; do
              echo "  - $file"
            done
            exit 1
          fi
          
          echo "✅ All critical files verified present"
          
      - name: 🐍 Setup Safe Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install Minimal Dependencies
        run: |
          pip install openai>=1.0.0
          
      - name: 🤖 ULTRA-SAFE AI Improvements
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🤖 Running ULTRA-SAFE AI improvements..."
          echo "Scope: COMMENT ADDITIONS ONLY - NO FUNCTIONAL CHANGES"
          
          cat > ultra_safe_ai.py << 'EOF'
import os
import json
from datetime import datetime

def ultra_safe_improve():
    """ULTRA SAFE: Only adds comments, no functional changes"""
    
    improvement_type = "${{ github.event.inputs.improvement_type }}"
    
    # ULTRA-LIMITED file scope
    safe_files = {
        "js/main.js": "// ",
        "js/chat.js": "// ",
        "js/auth.js": "// ",
        "css/main.css": "/* ",
        "css/chat.css": "/* ",
        "css/responsive.css": "/* "
    }
    
    changes_made = []
    
    for filepath, comment_prefix in safe_files.items():
        if not os.path.exists(filepath):
            print(f"⚠️ File not found: {filepath}")
            continue
            
        print(f"🔍 Processing: {filepath}")
        
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Create safe comment based on improvement type
        safe_comment = f"{comment_prefix}AI Bot Enhancement - {improvement_type} - {datetime.now().strftime('%Y-%m-%d')}"
        if filepath.endswith('.css'):
            safe_comment += " */"
        safe_comment += "\n"
        
        # ONLY add comment if not already present
        if "AI Bot Enhancement" not in content:
            new_content = safe_comment + content
            
            # Write back safely
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            changes_made.append(filepath)
            print(f"✅ Safe comment added to: {filepath}")
        else:
            print(f"ℹ️ Already enhanced: {filepath}")
    
    return changes_made

if __name__ == "__main__":
    try:
        changed_files = ultra_safe_improve()
        
        if changed_files:
            print(f"\n✅ SAFE CHANGES COMPLETED:")
            for file in changed_files:
                print(f"  - {file}")
        else:
            print("\nℹ️ No changes needed - files already optimal")
            
    except Exception as e:
        print(f"❌ Error: {e}")
        exit(1)
EOF

          python ultra_safe_ai.py
          
      - name: 🔍 Verify Changes Are Minimal
        run: |
          echo "🔍 Verifying all changes are minimal and safe..."
          
          if [[ -n $(git status --porcelain) ]]; then
            echo "📝 Changes detected:"
            git diff --stat
            
            # Count lines changed
            LINES_CHANGED=$(git diff --shortstat | grep -o '[0-9]* insertions' | grep -o '[0-9]*' || echo "0")
            LINES_DELETED=$(git diff --shortstat | grep -o '[0-9]* deletions' | grep -o '[0-9]*' || echo "0")
            
            echo "📊 Impact: +$LINES_CHANGED lines, -$LINES_DELETED lines"
            
            # Safety check: refuse if too many changes
            if [ "$LINES_CHANGED" -gt 10 ] || [ "$LINES_DELETED" -gt 0 ]; then
              echo "❌ TOO MANY CHANGES - ROLLING BACK"
              git checkout .
              exit 1
            fi
            
            echo "✅ Changes verified as minimal and safe"
          else
            echo "ℹ️ No changes made"
          fi
          
      - name: 💾 Safe Commit with Full Rollback Info
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config --global user.name "PMERIT Safe AI Bot"
            git config --global user.email "safe-ai@pmerit.com"
            
            git add .
            
            # Create detailed commit message with rollback info
            git commit -m "🤖 Safe AI: ${{ github.event.inputs.improvement_type }}

🛡️ SAFETY INFO:
- Backup: ${{ env.BACKUP_FILE }}
- Change Type: Comment additions only
- Risk Level: MINIMAL
- Files Modified: $(git diff --name-only HEAD~1 | tr '\n' ' ')

🔄 ROLLBACK COMMANDS:
- Simple: git revert HEAD
- Full: git reset --hard HEAD~1
- Emergency: Restore from backup in .emergency_backups/

✅ All safety checks passed
🎯 Enhancement: ${{ github.event.inputs.improvement_type }}"
            
            echo "✅ Safe commit completed with full rollback information"
          fi
          
      - name: 🎯 Final Safety Verification
        run: |
          echo "🔍 FINAL SAFETY VERIFICATION..."
          
          # Verify no critical files were deleted
          CRITICAL_FILES=("index.html" "css/main.css" "js/main.js" "CNAME")
          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ CRITICAL FILE MISSING: $file - EMERGENCY ROLLBACK"
              git reset --hard HEAD~1
              exit 1
            fi
          done
          
          # Verify website structure intact
          if [ ! -d "css" ] || [ ! -d "js" ]; then
            echo "❌ DIRECTORY STRUCTURE DAMAGED - EMERGENCY ROLLBACK"
            git reset --hard HEAD~1
            exit 1
          fi
          
          echo "✅ ALL SAFETY CHECKS PASSED"
          echo "🎉 Safe AI operation completed successfully"
          echo "💾 Backup available: .emergency_backups/${{ env.BACKUP_FILE }}"
